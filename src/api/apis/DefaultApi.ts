/* tslint:disable */
/* eslint-disable */
/**
 * radarvan
 * Stats for generals
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  MatchDetails,
  Matches,
  PlayerStats,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    MatchDetailsFromJSON,
    MatchDetailsToJSON,
    MatchesFromJSON,
    MatchesToJSON,
    PlayerStatsFromJSON,
    PlayerStatsToJSON,
} from '../models/index';

export interface GetMatchDetailsApiDetailsMatchIdGetRequest {
    matchId: number;
}

export interface GetMatchesApiMatchesMatchCountGetRequest {
    matchCount: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Get details about a particular match
     * Get Match Details
     */
    async getMatchDetailsApiDetailsMatchIdGetRaw(requestParameters: GetMatchDetailsApiDetailsMatchIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MatchDetails>> {
        if (requestParameters['matchId'] == null) {
            throw new runtime.RequiredError(
                'matchId',
                'Required parameter "matchId" was null or undefined when calling getMatchDetailsApiDetailsMatchIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/details/{match_id}`;
        urlPath = urlPath.replace(`{${"match_id"}}`, encodeURIComponent(String(requestParameters['matchId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MatchDetailsFromJSON(jsonValue));
    }

    /**
     * Get details about a particular match
     * Get Match Details
     */
    async getMatchDetailsApiDetailsMatchIdGet(requestParameters: GetMatchDetailsApiDetailsMatchIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MatchDetails> {
        const response = await this.getMatchDetailsApiDetailsMatchIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get listing of matches, up to a return count limit for paging.
     * Get Matches
     */
    async getMatchesApiMatchesMatchCountGetRaw(requestParameters: GetMatchesApiMatchesMatchCountGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Matches>> {
        if (requestParameters['matchCount'] == null) {
            throw new runtime.RequiredError(
                'matchCount',
                'Required parameter "matchCount" was null or undefined when calling getMatchesApiMatchesMatchCountGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/matches/{match_count}`;
        urlPath = urlPath.replace(`{${"match_count"}}`, encodeURIComponent(String(requestParameters['matchCount'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MatchesFromJSON(jsonValue));
    }

    /**
     * Get listing of matches, up to a return count limit for paging.
     * Get Matches
     */
    async getMatchesApiMatchesMatchCountGet(requestParameters: GetMatchesApiMatchesMatchCountGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Matches> {
        const response = await this.getMatchesApiMatchesMatchCountGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get player stats.
     * Get Player Stats
     */
    async getPlayerStatsApiPlayerstatsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlayerStats>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/playerstats`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlayerStatsFromJSON(jsonValue));
    }

    /**
     * Get player stats.
     * Get Player Stats
     */
    async getPlayerStatsApiPlayerstatsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlayerStats> {
        const response = await this.getPlayerStatsApiPlayerstatsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Reparse the replays.
     * Reparse
     */
    async reparseApiReparseGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/reparse`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Reparse the replays.
     * Reparse
     */
    async reparseApiReparseGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.reparseApiReparseGetRaw(initOverrides);
        return await response.value();
    }

}
