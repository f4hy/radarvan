/* tslint:disable */
/* eslint-disable */
/**
 * radarvan
 * Stats for generals
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Player } from './Player';
import {
    PlayerFromJSON,
    PlayerFromJSONTyped,
    PlayerToJSON,
    PlayerToJSONTyped,
} from './Player';
import type { Team } from './Team';
import {
    TeamFromJSON,
    TeamFromJSONTyped,
    TeamToJSON,
    TeamToJSONTyped,
} from './Team';

/**
 * 
 * @export
 * @interface MatchInfoOutput
 */
export interface MatchInfoOutput {
    /**
     * 
     * @type {number}
     * @memberof MatchInfoOutput
     */
    id: number;
    /**
     * 
     * @type {Date}
     * @memberof MatchInfoOutput
     */
    timestamp: Date;
    /**
     * 
     * @type {string}
     * @memberof MatchInfoOutput
     */
    map: string;
    /**
     * 
     * @type {Team}
     * @memberof MatchInfoOutput
     */
    winningTeam: Team;
    /**
     * 
     * @type {Array<Player>}
     * @memberof MatchInfoOutput
     */
    players: Array<Player>;
    /**
     * 
     * @type {number}
     * @memberof MatchInfoOutput
     */
    durationMinutes: number;
    /**
     * 
     * @type {string}
     * @memberof MatchInfoOutput
     */
    filename: string;
    /**
     * 
     * @type {string}
     * @memberof MatchInfoOutput
     */
    incomplete: string;
    /**
     * 
     * @type {string}
     * @memberof MatchInfoOutput
     */
    notes: string;
}



/**
 * Check if a given object implements the MatchInfoOutput interface.
 */
export function instanceOfMatchInfoOutput(value: object): value is MatchInfoOutput {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('timestamp' in value) || value['timestamp'] === undefined) return false;
    if (!('map' in value) || value['map'] === undefined) return false;
    if (!('winningTeam' in value) || value['winningTeam'] === undefined) return false;
    if (!('players' in value) || value['players'] === undefined) return false;
    if (!('durationMinutes' in value) || value['durationMinutes'] === undefined) return false;
    if (!('filename' in value) || value['filename'] === undefined) return false;
    if (!('incomplete' in value) || value['incomplete'] === undefined) return false;
    if (!('notes' in value) || value['notes'] === undefined) return false;
    return true;
}

export function MatchInfoOutputFromJSON(json: any): MatchInfoOutput {
    return MatchInfoOutputFromJSONTyped(json, false);
}

export function MatchInfoOutputFromJSONTyped(json: any, ignoreDiscriminator: boolean): MatchInfoOutput {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'timestamp': (new Date(json['timestamp'])),
        'map': json['map'],
        'winningTeam': TeamFromJSON(json['winning_team']),
        'players': ((json['players'] as Array<any>).map(PlayerFromJSON)),
        'durationMinutes': json['duration_minutes'],
        'filename': json['filename'],
        'incomplete': json['incomplete'],
        'notes': json['notes'],
    };
}

export function MatchInfoOutputToJSON(json: any): MatchInfoOutput {
    return MatchInfoOutputToJSONTyped(json, false);
}

export function MatchInfoOutputToJSONTyped(value?: MatchInfoOutput | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'timestamp': value['timestamp'].toISOString(),
        'map': value['map'],
        'winning_team': TeamToJSON(value['winningTeam']),
        'players': ((value['players'] as Array<any>).map(PlayerToJSON)),
        'duration_minutes': value['durationMinutes'],
        'filename': value['filename'],
        'incomplete': value['incomplete'],
        'notes': value['notes'],
    };
}

