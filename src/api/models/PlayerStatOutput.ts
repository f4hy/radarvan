/* tslint:disable */
/* eslint-disable */
/**
 * radarvan
 * Stats for generals
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { WinLoss } from './WinLoss';
import {
    WinLossFromJSON,
    WinLossFromJSONTyped,
    WinLossToJSON,
    WinLossToJSONTyped,
} from './WinLoss';
import type { PlayerRateOverTimeOutput } from './PlayerRateOverTimeOutput';
import {
    PlayerRateOverTimeOutputFromJSON,
    PlayerRateOverTimeOutputFromJSONTyped,
    PlayerRateOverTimeOutputToJSON,
    PlayerRateOverTimeOutputToJSONTyped,
} from './PlayerRateOverTimeOutput';
import type { PlayerStatFactionWL } from './PlayerStatFactionWL';
import {
    PlayerStatFactionWLFromJSON,
    PlayerStatFactionWLFromJSONTyped,
    PlayerStatFactionWLToJSON,
    PlayerStatFactionWLToJSONTyped,
} from './PlayerStatFactionWL';

/**
 * 
 * @export
 * @interface PlayerStatOutput
 */
export interface PlayerStatOutput {
    /**
     * 
     * @type {string}
     * @memberof PlayerStatOutput
     */
    playerName: string;
    /**
     * 
     * @type {{ [key: string]: WinLoss; }}
     * @memberof PlayerStatOutput
     */
    stats: { [key: string]: WinLoss; };
    /**
     * 
     * @type {Array<PlayerStatFactionWL>}
     * @memberof PlayerStatOutput
     */
    factionStats: Array<PlayerStatFactionWL>;
    /**
     * 
     * @type {Array<PlayerRateOverTimeOutput>}
     * @memberof PlayerStatOutput
     */
    overTime: Array<PlayerRateOverTimeOutput>;
}

/**
 * Check if a given object implements the PlayerStatOutput interface.
 */
export function instanceOfPlayerStatOutput(value: object): value is PlayerStatOutput {
    if (!('playerName' in value) || value['playerName'] === undefined) return false;
    if (!('stats' in value) || value['stats'] === undefined) return false;
    if (!('factionStats' in value) || value['factionStats'] === undefined) return false;
    if (!('overTime' in value) || value['overTime'] === undefined) return false;
    return true;
}

export function PlayerStatOutputFromJSON(json: any): PlayerStatOutput {
    return PlayerStatOutputFromJSONTyped(json, false);
}

export function PlayerStatOutputFromJSONTyped(json: any, ignoreDiscriminator: boolean): PlayerStatOutput {
    if (json == null) {
        return json;
    }
    return {
        
        'playerName': json['playerName'],
        'stats': (mapValues(json['stats'], WinLossFromJSON)),
        'factionStats': ((json['factionStats'] as Array<any>).map(PlayerStatFactionWLFromJSON)),
        'overTime': ((json['overTime'] as Array<any>).map(PlayerRateOverTimeOutputFromJSON)),
    };
}

export function PlayerStatOutputToJSON(json: any): PlayerStatOutput {
    return PlayerStatOutputToJSONTyped(json, false);
}

export function PlayerStatOutputToJSONTyped(value?: PlayerStatOutput | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'playerName': value['playerName'],
        'stats': (mapValues(value['stats'], WinLossToJSON)),
        'factionStats': ((value['factionStats'] as Array<any>).map(PlayerStatFactionWLToJSON)),
        'overTime': ((value['overTime'] as Array<any>).map(PlayerRateOverTimeOutputToJSON)),
    };
}

