"""Types from the cncstats parsed json.

Generated by claude from a jsonschema which was generated by ai, so may not be perfect
"""

from pydantic import BaseModel, Field, field_validator, RootModel, ConfigDict
from typing import List, Optional, Union, Dict, Annotated


class ByteArray2(RootModel):
    """Array of exactly 2 bytes (0-255)"""

    root: Annotated[List[int], Field(min_length=2, max_length=2)]


class ByteArray4(RootModel):
    """Array of exactly 4 bytes (0-255)"""

    root: Annotated[List[int], Field(min_length=4, max_length=4)]


class ByteArray8(RootModel):
    """Array of exactly 8 bytes (0-255)"""

    root: Annotated[List[int], Field(min_length=8, max_length=8)]


class ByteArray12(RootModel):
    """Array of exactly 12 bytes (0-255)"""

    root: Annotated[List[int], Field(min_length=12, max_length=12)]


class Position3D(BaseModel):

    X: float
    Y: float
    Z: float


class ScreenPosition(BaseModel):

    X: int
    Y: int


class ScreenRectangle(RootModel):
    """Array of exactly 2 ScreenPosition objects"""

    root: Annotated[List[ScreenPosition], Field(min_length=2, max_length=2)]


class Unit(BaseModel):

    Name: str
    Cost: int


class Building(BaseModel):

    Name: str
    Cost: int


class Upgrade(BaseModel):

    Name: str
    Cost: int


class Power(BaseModel):

    Name: str


class ArgMetadata(BaseModel):

    Type: int
    Count: int


class PlayerMoney(BaseModel):

    Player1Money: int
    Player2Money: int
    Player3Money: int
    Player4Money: int
    Player5Money: int
    Player6Money: int
    Player7Money: int
    Player8Money: int


class EnhancedBodyChunk(BaseModel):

    TimeCode: int
    OrderCode: int
    OrderName: str
    PlayerID: int
    PlayerName: str
    NumberOfArguments: int
    Details: Optional[Union[Unit, Building, Upgrade, Power]] = None
    ArgMetadata: List[ArgMetadata]
    Arguments: List[
        Union[int, float, bool, str, Position3D, ScreenPosition, ScreenRectangle]
    ]
    player_money: PlayerMoney | None = None


class ObjectSummary(BaseModel):

    Count: int
    TotalSpent: int


class PlayerSummary(BaseModel):

    Name: str
    Side: str
    Team: int
    Win: bool
    MoneySpent: int
    UnitsCreated: Dict[str, ObjectSummary]
    BuildingsBuilt: Dict[str, ObjectSummary]
    UpgradesBuilt: Dict[str, ObjectSummary]
    PowersUsed: Dict[str, int]


class Player(BaseModel):

    Type: str
    Name: str
    IP: str
    Port: str
    FT: str
    Color: str
    Faction: str
    StartingPosition: str
    Team: int
    Unknown: str


class Metadata(BaseModel):

    MapFile: str
    MapCRC: str
    MapSize: str
    Seed: str
    C: str
    SR: str
    StartingCredits: str
    O: str
    Players: List[Player]


class GeneralsHeader(BaseModel):

    GameType: str
    TimeStampBegin: int
    TimeStampEnd: int
    NumTimeStamps: int
    Filler: ByteArray12
    FileName: str
    Year: int
    Month: int
    DOW: int
    Day: int
    Hour: int
    Minute: int
    Second: int
    Millisecond: int
    Version: str
    BuildDate: str
    VersionMinor: int
    VersionMajor: int
    Hash: ByteArray8
    Metadata: Metadata
    ReplayOwnerSlot: ByteArray2
    Unknown1: ByteArray4
    Unknown2: ByteArray4
    Unknown3: ByteArray4
    GameSpeed: int


class EnhancedReplay(BaseModel):
    Header: GeneralsHeader
    Body: List[EnhancedBodyChunk]
    Summary: List[PlayerSummary]
    Offset: int
